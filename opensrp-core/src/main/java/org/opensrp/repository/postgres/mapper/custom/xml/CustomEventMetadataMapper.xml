<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="org.opensrp.repository.postgres.mapper.custom.CustomEventMetadataMapper">

	<resultMap id="BaseEventResultMap" type="org.opensrp.domain.postgres.Event">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="json" jdbcType="OTHER" property="json"
			typeHandler="org.opensrp.repository.postgres.handler.EventTypeHandler" />
	</resultMap>
	
	<resultMap id="customMetadata" type="org.opensrp.domain.CustomEventMeta">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="provider" jdbcType="VARCHAR" property="provider"/>
		<result column="division" jdbcType="VARCHAR" property="division"/>
		<result column="district" jdbcType="VARCHAR" property="district"/>
		<result column="branch" jdbcType="VARCHAR" property="branch"/>
		<result column="village" jdbcType="VARCHAR" property="village"/>
	</resultMap>

	<sql id="Base_Event_Column_List">
		e.id, e.json
	</sql>

	<sql id="Event_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and em.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and em.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and em.${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and em.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>

	<sql id="Rowbounds_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and em.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and em.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and em.${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and em.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>

	<select id="selectBySearchBean"
			resultMap="BaseEventResultMap">
		select e.id,e.json
		FROM core.event${table} e , core.event_metadata${table} em where e.id=em.event_id
		and em.server_version::BIGINT >= #{serverVersion,jdbcType=BIGINT}  and
		em.base_entity_id=any(
		select base_entity_id from core.client_metadata${table}
		where

		<if test="addressBean.villageId != null">
			village_id=any(array
			<foreach close="]" collection="addressBean.villageId" item="listItem" open="[" separator=",">
				#{listItem}
			</foreach>
			)
		</if>
		)
		order by em.server_version asc
		LIMIT #{limit}

	</select>

	<select id="selectByDocumentId" 
		resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from core.event_metadata${table} em
		join core.event${table} e on em.event_id = e.id
		where em.document_id = #{documentId,jdbcType=VARCHAR} and em.date_deleted is null
	</select>

	<select id="selectMany"
		resultMap="BaseEventResultMap">
		select
		<!-- <if test="distinct"> -->
			distinct
		<!-- </if> -->
		<include refid="Base_Event_Column_List" />
		from core.event_metadata${table} em
		join core.event${table} e on em.event_id = e.id
		<if test="_parameter != null">
			<include refid="Event_Example_Where_Clause" />
		</if>
		<!-- <if test="orderByClause != null">
			order by em.${example.orderByClause}
		</if> -->
	</select>


	<select id="selectNotInOpenMRSByServerVersion" parameterType="map"
		resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from core.event_metadata${table} em
		join core.event${table} e on em.event_id = e.id
		where ( em.openmrs_uuid is null or em.openmrs_uuid ='' )
			and em.server_version between #{from,jdbcType=BIGINT} and #{to,jdbcType=BIGINT} 
			and em.date_deleted is null
		LIMIT #{limit}
	</select>
	
	<select id="selectNotInOpenMRSByServerVersionAndType" parameterType="map"
		resultMap="BaseEventResultMap">
		select
		<include refid="Base_Event_Column_List" />
		from core.event_metadata${table} em
		join core.event${table} e on em.event_id = e.id
		where ( em.openmrs_uuid is null or em.openmrs_uuid ='' )
			and em.event_type = #{eventType,jdbcType=VARCHAR}
			and em.server_version between #{from,jdbcType=BIGINT} and #{to,jdbcType=BIGINT} 
			and em.date_deleted is null
		LIMIT #{limit}
	</select>


	<select id="selectManyWithRowBounds" resultMap="BaseEventResultMap">
		select
		<if test="example.distinct">
			distinct
		</if>
		<include refid="Base_Event_Column_List" />
		from core.event_metadata${table} em
		inner join core.event${table} e on em.event_id = e.id
		<if test="_parameter != null">
			<include refid="Rowbounds_Example_Where_Clause" />
		</if>
		<if test="example.orderByClause != null">
			order by em.${example.orderByClause}
		</if>
		LIMIT #{limit} OFFSET #{offset}
	</select>

	<select id="findEventIdByFormSubmissionId" 
		resultType="Integer">
		select event_id
		from core.event_metadata${table} em
		where em.form_submission_id = #{formSubmissionId,jdbcType=VARCHAR} and em.date_deleted is null limit 1
	</select>
	
	<select id="findEventByEventId" 
		resultMap="BaseEventResultMap">
		select
		e.id, e.json
		from core.event${table} e
		where e.id = #{eventId} limit 1
	</select>

	<select id="selectByProvider"
			resultMap="BaseEventResultMap">
				with em as (
					select
						event_id
					from
						core.event_metadata${table} em
					where
						em.provider_id=#{providerId,jdbcType=VARCHAR}
						and em.server_version::BIGINT >= #{serverVersion,jdbcType=BIGINT}
				)select
				 	e.id,e.json
				from
				  	core.event${table} e
				where
				  	e.id=any(select event_id from em )
				order by
				 	e.server_version asc
	</select>

	<select id="getHouseholdId" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select
		 	LPAD(n::text, (case when length(n::text)>=4 then length(n::text) else 4 end), '0')
		from
		 	generate_series(${maxId}, ${maxIdPlus}) as x(n) order by x.n
	</select>
	<select id="selectBySearchBeanFromFunction"
			resultMap="BaseEventResultMap">	
		select id,json from core.sync_data(#{table,jdbcType=VARCHAR},#{serverVersion,jdbcType=BIGINT},#{userId}) ; 
	</select>
	
	<select id="selectGuestHouseholdId" parameterType="java.lang.Integer"
		resultType="java.lang.String">
		select
		 	LPAD(n::text, (case when length(n::text)>=5 then length(n::text) else 5 end), '0')
		from
		 	generate_series(${maxId}, ${maxIdPlus}) as x(n) order by x.n
	</select>
	
	<select id="selectFirstEventMeta" 
		resultMap="customMetadata">
		select	em.id,em.district,em.division,em.village,em.provider_id,em.branch from core.event_metadata em 
		 where em.base_entity_id =#{baseEntityId,jdbcType=VARCHAR} order by id asc limit 1

	</select>
	
	<select id="selectEventByBaseEntityId" 
		resultMap="BaseEventResultMap">
		select id,json from core.event${table} where base_entity_id = #{baseEntityId,jdbcType=VARCHAR}
	</select>
</mapper>
