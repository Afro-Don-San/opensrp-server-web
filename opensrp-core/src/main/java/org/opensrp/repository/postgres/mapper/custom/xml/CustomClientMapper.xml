<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.opensrp.repository.postgres.mapper.custom.CustomClientMapper">

	<resultMap id="customQueryMap" type="org.opensrp.domain.postgres.CustomQuery">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name"/>
		<result column="uuid" jdbcType="VARCHAR" property="uuid"/>
		<result column="max_health_id" jdbcType="BIGINT" property="maxHealthId"/>
		<result column="is_available" jdbcType="BOOLEAN" property="isAvailable"/>
	</resultMap>

	<resultMap id="customQueryLocationTreeMap" type="org.opensrp.domain.postgres.CustomQuery">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="leaf_loc_id" jdbcType="BIGINT" property="leafLocationId"/>
		<result column="member_id" jdbcType="BIGINT" property="memberId"/>
		<result column="first_name" jdbcType="VARCHAR" property="firstName"/>
		<result column="last_name" jdbcType="VARCHAR" property="lastName"/>
		<result column="loc_tag_name" jdbcType="VARCHAR" property="locationTagName"/>
	</resultMap>
    <resultMap id="customQueryPALocationTreeMap" type="org.opensrp.domain.postgres.CustomQuery">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="leaf_loc_id" jdbcType="BIGINT" property="leafLocationId"/>
        <result column="member_id" jdbcType="BIGINT" property="memberId"/>
        <result column="first_name" jdbcType="VARCHAR" property="firstName"/>
        <result column="last_name" jdbcType="VARCHAR" property="lastName"/>
        <result column="loc_tag_name" jdbcType="VARCHAR" property="locationTagName"/>
        <result column="provider_username" jdbcType="VARCHAR" property="providerUsername"/>
        <result column="provider_fullname" jdbcType="VARCHAR" property="providerFullname"/>
    </resultMap>
	<resultMap id="targetDetails" type="org.opensrp.domain.postgres.TargetDetails">
		<id column="username" jdbcType="VARCHAR" property="username" />
		<result column="targetid" jdbcType="BIGINT" property="targetId"/>
		<result column="targetname" jdbcType="VARCHAR" property="targetName"/>
		<result column="targetcount" jdbcType="BIGINT" property="targetCount"/>
		<result column="year" jdbcType="VARCHAR" property="year"/>
		<result column="month" jdbcType="VARCHAR" property="month"/>
		<result column="day" jdbcType="VARCHAR" property="day"/>
		<result column="timestamp" jdbcType="BIGINT" property="timestamp"/>
		<result column="start_date" jdbcType="VARCHAR" property="startDate"/>
		<result column="end_date" jdbcType="VARCHAR" property="endDate"/>
	</resultMap>
	<resultMap id="userLocationMap" type="org.opensrp.domain.UserLocationTableName">
		
	</resultMap>
	
	<resultMap id="migrationMap" type="org.opensrp.domain.Migration">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="migration_date" jdbcType="DATE" property="migrationDate"/>
		<result column="member_name" jdbcType="VARCHAR" property="memberName"/>
		<result column="member_contact" jdbcType="VARCHAR" property="memberContact"/>
		<result column="member_id_in" jdbcType="VARCHAR" property="memberIDIn"/>
		<result column="member_id_out" jdbcType="VARCHAR" property="memberIDOut"/>
		
		<result column="hh_name_in" jdbcType="VARCHAR" property="HHNameIn"/>
		<result column="hh_name_out" jdbcType="VARCHAR" property="HHNameOut"/>
		<result column="hh_contact_out" jdbcType="VARCHAR" property="HHContactOut"/>
		<result column="hh_contact_in" jdbcType="VARCHAR" property="HHContactIn"/>
		<result column="division_out" jdbcType="VARCHAR" property="divisionOut"/>
		<result column="division_in" jdbcType="VARCHAR" property="divisionIn"/>
		<result column="district_out" jdbcType="VARCHAR" property="districtOut"/>
		<result column="district_in" jdbcType="VARCHAR" property="districtIn"/>
		<result column="upazila_out" jdbcType="VARCHAR" property="upazilaOut"/>
		<result column="upazila_in" jdbcType="VARCHAR" property="upazilaIn"/>
		<result column="pourasava_out" jdbcType="VARCHAR" property="pourasavaOut"/>
		<result column="pourasava_in" jdbcType="VARCHAR" property="pourasavaIn"/>
		<result column="union_out" jdbcType="VARCHAR" property="unionOut"/>
		<result column="union_in" jdbcType="VARCHAR" property="unionIn"/>
		<result column="village_out" jdbcType="VARCHAR" property="villageOut"/>
		<result column="village_in" jdbcType="VARCHAR" property="villageIn"/>
		<result column="village_id_out" jdbcType="VARCHAR" property="villageIDOut"/>
		<result column="village_id_in" jdbcType="VARCHAR" property="villageIDIn"/>
		<result column="branch_id_out" jdbcType="VARCHAR" property="BranchIDOut"/>
		<result column="branch_id_in" jdbcType="VARCHAR" property="branchIDIn"/>
		<result column="sk_out" jdbcType="VARCHAR" property="SKOut"/>
		<result column="sk_in" jdbcType="VARCHAR" property="SKIn"/>
		<result column="ss_out" jdbcType="VARCHAR" property="SSOut"/>
		<result column="ss_in" jdbcType="VARCHAR" property="SSIn"/>
		<result column="number_of_member_out" jdbcType="VARCHAR" property="numberOfMemberOut"/>
		<result column="number_of_member_in" jdbcType="VARCHAR" property="numberOfMemberIn"/>
		<result column="relation_with_hh_out" jdbcType="VARCHAR" property="relationWithHHOut"/>
		<result column="relation_with_hh_in" jdbcType="VARCHAR" property="relationWithHHIn"/>
		<result column="status" jdbcType="VARCHAR" property="status"/>
		<result column="is_member" jdbcType="VARCHAR" property="is_member"/>
		<result column="relational_id_in" jdbcType="VARCHAR" property="relationalIdIn"/>
		<result column="relational_id_out" jdbcType="VARCHAR" property="relationalIdOut"/>
		<result column="member_type" jdbcType="VARCHAR" property="memberType"/>
		<result column="dob" jdbcType="DATE" property="dob"/>
		<result column="base_entity_id" jdbcType="VARCHAR" property="baseEntityId"/>
		<result column="district_id_out" jdbcType="VARCHAR" property="districtIdOut"/>
		<result column="district_id_in" jdbcType="VARCHAR" property="districtIdIn"/>
		<result column="mother_id" jdbcType="VARCHAR" property="motherId"/>
		<result column="division_id_out" jdbcType="VARCHAR" property="divisionIdOut"/>
		<result column="division_id_in" jdbcType="VARCHAR" property="divisionIdIn"/>
		<result column="timestamp" jdbcType="BIGINT" property="timestamp"/>
	
	</resultMap>
	<resultMap id="LocationMap" type="org.opensrp.domain.LocationDTO">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="parent_id" jdbcType="BIGINT" property="parentId"/>
		<result column="name" jdbcType="BIGINT" property="name"/>
		
	</resultMap>
	<insert id="insertSelectiveAndSetId" parameterType="org.opensrp.domain.postgres.Client"
			useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into core.client
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="json != null">
				json,
			</if>
			<if test="serverVersion != null">
				server_version,
			</if>
			<if test="baseEntityId != null">
				base_entity_id,
			</if>
			<if test="district != null">
				district,
			</if>
			<if test="division != null">
				division,
			</if>
			<if test="branch != null">
				branch,
			</if>
			<if test="village != null">
				village,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=BIGINT},
			</if>
			<if test="json != null">
				#{json,jdbcType=OTHER,typeHandler=org.opensrp.repository.postgres.handler.ClientTypeHandler},
			</if>
			<if test="serverVersion != null">
				#{serverVersion,jdbcType=BIGINT},
			</if>
			<if test="baseEntityId != null">
				#{baseEntityId,jdbcType=VARCHAR},
			</if>
			<if test="district != null">
				#{district,jdbcType=VARCHAR},
			</if>
			<if test="division != null">
				#{division,jdbcType=VARCHAR},
			</if>
			<if test="branch != null">
				#{branch,jdbcType=VARCHAR},
			</if>
			<if test="village != null">
				#{village,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>


	<select id="selectByDocumentId" 
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		WHERE json ->> 'id' = #{documentId,jdbcType=VARCHAR} and date_deleted is null
	</select>


	<select id="selectByIdentifier"
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		join jsonb_each_text(core.client.json -> 'identifiers') j on true
		where j.value = #{identifier,jdbcType=VARCHAR} and date_deleted is null
	</select>


	<select id="selectByIdentifierOfType"
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		where json -> 'identifiers' ->> #{identifierType,jdbcType=VARCHAR} = #{identifier,jdbcType=VARCHAR}
		and date_deleted is null
	</select>


	<select id="selectByAttributeOfType" 
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		where json -> 'attributes' ->> #{attributeType,jdbcType=VARCHAR} = #{attribute,jdbcType=VARCHAR}
		and date_deleted is null
	</select>


	<select id="selectByRelationshipIdAndDateCreated"
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		join jsonb_each(json -> 'relationships') j on true
		where j.value  ?? #{relationalId,jdbcType=VARCHAR}  and date_deleted is null
		and (json ->> 'dateCreated')::date between #{dateFrom,jdbcType=DATE} and #{dateTo,jdbcType=DATE}
	</select>

	<select id="getClientByUpazila" parameterType="java.lang.String"
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select * from core.client${table}
		where json->'addresses'->0->'addressFields'->>'cityVillage' = #{name}
	</select>

	<select id="getTeamInfo" parameterType="java.lang.String"
			resultMap="customQueryMap">
		select t.name as name, t.uuid as uuid from core.users u join core.team_member tm on u.id = tm.person_id
		join core.team t on t.id = tm.team_id where u.username = #{username};
	</select>

	<select id="getProviderLocationTreeByChildRole" parameterType="map"
			resultMap="customQueryLocationTreeMap">
		select * from core.get_location_tree(#{memberId}, #{childRoleId});
	</select>

    <select id="getPALocationTreeByChildRole" parameterType="map"
            resultMap="customQueryPALocationTreeMap">
		select * from core.get_pa_location_tree(#{memberId}, #{childRoleId});
	</select>

	<select id="selectTargetDetails" parameterType="map" resultMap="targetDetails">
	select
		u.username,
		p.id targetId,
		case
			when lower(p."name") = 'household visit' then 'HH visit'
			when lower(p."name") = 'elco visit' then 'ELCO Registration'
			when lower(p."name") = 'iycf forum' then 'Child Forum'
			when lower(p."name") = 'women forum' then 'WOMEN Forum'
			when lower(p."name") = 'adult forum' then 'ADULT Forum'
			when lower(p."name") = 'women service' then 'Women package'
			when lower(p."name") = 'adolescent service' then 'Adolescent package'
			when lower(p."name") = 'ncd service' then 'NCD package'
			when lower(p."name") = 'delivery' then 'Pregnancy Outcome'
			when lower(p."name") = 'iycf service' then 'IYCF package'
			else p."name"
		end targetName,
		td.quantity targetCount,
		td."month",
		td."year",
		td."day",
		td."timestamp",
		TO_CHAR(td.start_date, 'DD-MM-YYYY') start_date,
		TO_CHAR(td.end_date, 'DD-MM-YYYY') end_date
	from
		core.target_details td
		join core.product p on td.product_id = p.id
		join core.users u on u.id = td.user_id
	where
		u.username = #{username}
		and td."timestamp" > #{targetTimestamp}
	order by td."timestamp";



	</select>

	<select id="getVillageByProviderId" parameterType="map"
			resultMap="customQueryMap">
		select * from core.get_location_tree_id(#{memberId}, #{childRoleId}, #{locationTagId});
	</select>

	<select id="getProviderLocationIdByChildRole" parameterType="map"
			resultMap="customQueryLocationTreeMap">
		select * from core.get_location_tree_id(#{memberId}, #{childRoleId}, #{locationTagId});
	</select>

	<select id="selectByRelationshipIdOfType" parameterType="map"
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		where json -> 'relationships'->#{relationshipType,jdbcType=VARCHAR} ?? #{relationshipId,jdbcType=VARCHAR}
		and date_deleted is null
	</select>


	<select id="selectByRelationShip" 
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="org.opensrp.repository.postgres.mapper.ClientMapper.Base_Column_List" />
		from core.client${table}
		join jsonb_each(json -> 'relationships') j on true
		where j.value ??  #{relationshipId,jdbcType=VARCHAR}  and date_deleted is null
	</select>
	
	<select id="selectUserStatus" parameterType="java.lang.String"
			resultMap="customQueryMap">
		select u.enabled as enable from core.users as u where u.username =  #{username,jdbcType=VARCHAR}
	</select>

	<select id="findUserId" parameterType="java.lang.String"
			resultMap="customQueryMap">
		select u.id as id from core.users as u where u.username =  #{username,jdbcType=VARCHAR}
	</select>

	<select id="getMaxHealthId" parameterType="java.lang.Integer"
			resultMap="customQueryMap">
		select coalesce(max(cast(h_id as integer)), 0) as  max_health_id from core.health_id where location_id = #{locationId};
	</select>
	<update id="updateAppVersion" parameterType="map">
    	update core.users set app_version = #{version} where username = #{username}    
    </update>

	<select id="getDistrictAndUpazila" parameterType="java.lang.Integer"
			resultMap="customQueryMap">
		select district as name, upazilas as code from core.get_district_and_upazila(#{locationTag})
	</select>

	<select id="imeiCheck" parameterType="java.lang.String" resultMap="customQueryMap">
		select
			(case when count(*) > 0 then true else false end) is_available
		from
		 	core.imei where imei1 = #{imeiNumber} or imei2 = #{imeiNumber};
	</select>
	
	<select id="selectUserLocation" resultMap="userLocationMap">
		select * from core.user_location as ul where ul.username = #{username} ; 
		 	
	</select>
	
	<select id="selectGuestMaxHealthId" parameterType="java.lang.Integer"
			resultMap="customQueryMap">
		select coalesce(max(cast(h_id as integer)), 0) as  max_health_id from core.health_id_guest where location_id = #{locationId};
	</select>
	
	<select id="selectByRelationshipId" 
			resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select id,json from core.client${table} where id=any(select client_id from core.client_metadata${table} as cm
		where relational_id = #{relationshipId,jdbcType=VARCHAR})		
	</select>
	
	<insert id="insertMigration" parameterType="org.opensrp.domain.Migration"
			useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		insert into core.migration
		<trim prefix="(" suffix=")" suffixOverrides=",">
			
			<if test="migrationDate != null">
				migration_date,
			</if>
			<if test="memberName != null">
				member_name,
			</if>
			<if test="memberContact != null">
				member_contact,
			</if>
			<if test="memberIDIn != null">
				member_id_in,
			</if>
			<if test="memberIDOut != null">
				member_id_out,
			</if>
			<if test="HHNameIn != null">
				hh_name_in,
			</if>
			<if test="HHNameOut != null">
				hh_name_out,
			</if>
			<if test="HHContactOut != null">
				hh_contact_out,
			</if>
			<if test="HHContactIn != null">
				hh_contact_in,
			</if>
			
			<if test="divisionOut != null">
				division_out,
			</if>
			
			<if test="divisionIn != null">
				division_in,
			</if>
			<if test="districtOut != null">
				district_out,
			</if>
			<if test="districtIn != null">
				district_in,
			</if>
			
			<if test="upazilaOut != null">
				upazila_out,
			</if>
			<if test="upazilaIn != null">
				upazila_in,
			</if>
			
			<if test="pourasavaOut != null">
				pourasava_out,
			</if>
			<if test="pourasavaIn != null">
				pourasava_in,
			</if>
			<if test="unionOut != null">
				union_out,
			</if>			
			<if test="unionIn != null">
				union_in,
			</if>
			<if test="villageOut != null">
				village_out,
			</if>
			
			<if test="villageIn != null">
				village_in,
			</if>
			<if test="villageIDOut != null">
				village_id_out,
			</if>
			<if test="villageIDIn != null">
				village_id_in,
			</if>
			<if test="BranchIDOut != null">
				branch_id_out,
			</if>
			
			<if test="branchIDIn != null">
				branch_id_in,
			</if>
			<if test="SKOut != null">
				sk_out,
			</if>
			
			<if test="SKIn != null">
				sk_in,
			</if>
			<if test="SSOut != null">
				ss_out,
			</if>
			<if test="SSIn != null">
				ss_in,
			</if>
			<if test="numberOfMemberOut != null">
				number_of_member_out,
			</if>
			
			<if test="numberOfMemberIn != null">
				number_of_member_in,
			</if>
			
			<if test="relationWithHHOut != null">
				relation_with_hh_out,
			</if>
			<if test="relationWithHHIn != null">
				relation_with_hh_in,
			</if>
			<if test="status != null">
				status,
			</if>
			
			<if test="isMember != null">
				is_member,
			</if>
			<if test="relationalIdIn != null">
				relational_id_in,
			</if>
			<if test="relationalIdOut != null">
				relational_id_out,
			</if>
			
			<if test="memberType != null">
				member_type,
			</if>
			<if test="dob != null">
				dob,
			</if>
			<if test="baseEntityId != null">
				base_entity_id,
			</if>
			
			<if test="districtIdOut != null">
				district_id_out,
			</if>
			<if test="districtIdIn != null">
				district_id_in,
			</if>
			<if test="motherId != null">
				mother_id,
			</if>
			<if test="divisionIdOut != null">
				division_id_out,
			</if>
			<if test="divisionIdIn != null">
				division_id_in,
			</if>
			<if test="timestamp != null">
				timestamp,
			</if>
			
			
			
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			
			<if test="migrationDate != null">
				#{migrationDate,jdbcType=DATE},
			</if>
			<if test="memberName != null">
				#{memberName,jdbcType=VARCHAR},
			</if>
			<if test="memberContact != null">
				#{memberContact,jdbcType=VARCHAR},
			</if>
			<if test="memberIDIn != null">
				#{memberIDIn,jdbcType=VARCHAR},
			</if>
			<if test="memberIDOut != null">
				#{memberIDOut,jdbcType=VARCHAR},
			</if>
			<if test="HHNameIn != null">
				#{HHNameIn,jdbcType=VARCHAR},
			</if>
			<if test="HHNameOut != null">
				#{HHNameOut,jdbcType=VARCHAR},
			</if>
			<if test="HHContactOut != null">
				#{HHContactOut,jdbcType=VARCHAR},
			</if>
			<if test="HHContactIn != null">
				#{HHContactIn,jdbcType=VARCHAR},
			</if>
			<if test="divisionOut != null">
				#{divisionOut,jdbcType=VARCHAR},
			</if>
			<if test="divisionIn != null">
				#{divisionIn,jdbcType=VARCHAR},
			</if>
			<if test="districtOut != null">
				#{districtOut,jdbcType=VARCHAR},
			</if>
			<if test="districtIn != null">
				#{districtIn,jdbcType=VARCHAR},
			</if>
			<if test="upazilaOut != null">
				#{upazilaOut,jdbcType=VARCHAR},
			</if>
			<if test="upazilaIn != null">
				#{upazilaIn,jdbcType=VARCHAR},
			</if>
			<if test="pourasavaOut != null">
				#{pourasavaOut,jdbcType=VARCHAR},
			</if>
			<if test="pourasavaIn != null">
				#{pourasavaIn,jdbcType=VARCHAR},
			</if>
			
			<if test="unionOut != null">
				#{unionOut,jdbcType=VARCHAR},
			</if>
			<if test="unionIn != null">
				#{unionIn,jdbcType=VARCHAR},
			</if>
			<if test="villageOut != null">
				#{villageOut,jdbcType=VARCHAR},
			</if>
			<if test="villageIn != null">
				#{villageIn,jdbcType=VARCHAR},
			</if>
			
			<if test="villageIDOut != null">
				#{villageIDOut,jdbcType=VARCHAR},
			</if>
			<if test="villageIDIn != null">
				#{villageIDIn,jdbcType=VARCHAR},
			</if>
			
			<if test="BranchIDOut != null">
				#{BranchIDOut,jdbcType=VARCHAR},
			</if>
			<if test="branchIDIn != null">
				#{branchIDIn,jdbcType=VARCHAR},
			</if>
			<if test="SKOut != null">
				#{SKOut,jdbcType=VARCHAR},
			</if>
			<if test="SKIn != null">
				#{SKIn,jdbcType=VARCHAR},
			</if>
			<if test="SSOut != null">
				#{SSOut,jdbcType=VARCHAR},
			</if>
			
			<if test="SSIn != null">
				#{SSIn,jdbcType=VARCHAR},
			</if>
			<if test="numberOfMemberOut != null">
				#{numberOfMemberOut,jdbcType=VARCHAR},
			</if>
			<if test="numberOfMemberIn != null">
				#{numberOfMemberIn,jdbcType=VARCHAR},
			</if>
			<if test="relationWithHHOut != null">
				#{relationWithHHOut,jdbcType=VARCHAR},
			</if>
			<if test="relationWithHHIn != null">
				#{relationWithHHIn,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=VARCHAR},
			</if>
			<if test="isMember != null">
				#{isMember,jdbcType=VARCHAR},
			</if>
			
			<if test="relationalIdIn != null">
				#{relationalIdIn,jdbcType=VARCHAR},
			</if>
			
			<if test="relationalIdOut != null">
				#{relationalIdOut,jdbcType=VARCHAR},
			</if>
			
			<if test="memberType != null">
				#{memberType,jdbcType=VARCHAR},
			</if>
			<if test="dob != null">
				#{dob,jdbcType=DATE},
			</if>
			<if test="baseEntityId != null">
				#{baseEntityId,jdbcType=VARCHAR},
			</if>
			<if test="districtIdOut != null">
				#{districtIdOut,jdbcType=VARCHAR},
			</if>
			<if test="districtIdIn != null">
				#{districtIdIn,jdbcType=VARCHAR},
			</if>
			<if test="motherId != null">
				#{motherId,jdbcType=VARCHAR},
			</if>
			<if test="divisionIdOut != null">
				#{divisionIdOut,jdbcType=VARCHAR},
			</if>
			<if test="divisionIdIn != null">
				#{divisionIdIn,jdbcType=VARCHAR},
			</if>
			<if test="timestamp != null">
				#{timestamp,jdbcType=BIGINT},
			</if>
			
		</trim>
	</insert>
	
	<select id="selectMigrationById" resultMap="migrationMap">
		select * from core.migration as m where m.id = #{id} ; 
		 	
	</select>
	
	<select id="selectMigrationByIdRelationId" resultMap="migrationMap">
		select * from core.migration as m where m.relational_id_in = #{relationalId} and member_type='Member'
		and status=#{status,jdbcType=VARCHAR}; 
		 	
	</select>
	<update id="updateMigrationStatusById">    
    	update core.migration
	    <set>      
	        status = #{status,jdbcType=VARCHAR}
	    </set>
	    <where>
	    	id=#{id,jdbcType=BIGINT}
	    </where>
  	</update>
  	
  	<update id="updateMigration" parameterType="org.opensrp.domain.Migration">
    
	    update core.migration
	    <set>
	    	<trim prefix="values (" suffix=")" suffixOverrides=",">
		    	<if test="migrationDate != null">
					migration_date = #{migrationDate,jdbcType=DATE},
				</if>
				<if test="memberName != null">
					member_name = #{memberName,jdbcType=VARCHAR},
				</if>
				<if test="memberContact != null">
					member_contact = #{memberContact,jdbcType=VARCHAR},
				</if>
				<if test="memberIDIn != null">
					member_id_in = #{memberIDIn,jdbcType=VARCHAR},
				</if>
				<if test="memberIDOut != null">
					member_id_out = #{memberIDOut,jdbcType=VARCHAR},
				</if>
				<if test="HHNameIn != null">
					hh_name_in = #{HHNameIn,jdbcType=VARCHAR},
				</if>
				<if test="HHNameOut != null">
					hh_name_out = #{HHNameOut,jdbcType=VARCHAR},
				</if>
				<if test="HHContactOut != null">
					hh_contact_out = #{HHContactOut,jdbcType=VARCHAR},
				</if>
				<if test="HHContactIn != null">
					hh_contact_in = #{HHContactIn,jdbcType=VARCHAR},
				</if>
				<if test="divisionOut != null">
					division_out = #{divisionOut,jdbcType=VARCHAR},
				</if>
				<if test="divisionIn != null">
					division_in = #{divisionIn,jdbcType=VARCHAR},
				</if>
				<if test="districtOut != null">
					district_out = #{districtOut,jdbcType=VARCHAR},
				</if>
				<if test="districtIn != null">
					district_in = #{districtIn,jdbcType=VARCHAR},
				</if>
				<if test="upazilaOut != null">
					upazila_out = #{upazilaOut,jdbcType=VARCHAR},
				</if>
				<if test="upazilaIn != null">
					upazila_in = #{upazilaIn,jdbcType=VARCHAR},
				</if>
				<if test="pourasavaOut != null">
					pourasava_out=#{pourasavaOut,jdbcType=VARCHAR},
				</if>
				<if test="pourasavaIn != null">
					pourasava_in = #{pourasavaIn,jdbcType=VARCHAR},
				</if>
				
				<if test="unionOut != null">
					union_out = #{unionOut,jdbcType=VARCHAR},
				</if>
				<if test="unionIn != null">
					union_in = #{unionIn,jdbcType=VARCHAR},
				</if>
				<if test="villageOut != null">
					village_out = #{villageOut,jdbcType=VARCHAR},
				</if>
				<if test="villageIn != null">
					village_in = #{villageIn,jdbcType=VARCHAR},
				</if>
				
				<if test="villageIDOut != null">
					village_id_out = #{villageIDOut,jdbcType=VARCHAR},
				</if>
				<if test="villageIDIn != null">
					village_id_in = #{villageIDIn,jdbcType=VARCHAR},
				</if>
				
				<if test="BranchIDOut != null">
					branch_id_out = #{BranchIDOut,jdbcType=VARCHAR},
				</if>
				<if test="branchIDIn != null">
					branch_id_in = #{branchIDIn,jdbcType=VARCHAR},
				</if>
				<if test="SKOut != null">
					sk_out = #{SKOut,jdbcType=VARCHAR},
				</if>
				<if test="SKIn != null">
					sk_in = #{SKIn,jdbcType=VARCHAR},
				</if>
				<if test="SSOut != null">
					ss_out = #{SSOut,jdbcType=VARCHAR},
				</if>
				
				<if test="SSIn != null">
					ss_in = #{SSIn,jdbcType=VARCHAR},
				</if>
				<if test="numberOfMemberOut != null">
					number_of_member_out = #{numberOfMemberOut,jdbcType=VARCHAR},
				</if>
				<if test="numberOfMemberIn != null">
					number_of_member_in = #{numberOfMemberIn,jdbcType=VARCHAR},
				</if>
				<if test="relationWithHHOut != null">
					relation_with_hh_out = #{relationWithHHOut,jdbcType=VARCHAR},
				</if>
				<if test="relationWithHHIn != null">
					relation_with_hh_in = #{relationWithHHIn,jdbcType=VARCHAR},
				</if>
				<if test="status != null">
					status = #{status,jdbcType=VARCHAR},
				</if>
				<if test="isMember != null">
					is_member = #{isMember,jdbcType=VARCHAR},
				</if>
				
				<if test="relationalIdIn != null">
					relational_id_in = #{relationalIdIn,jdbcType=VARCHAR},
				</if>
				
				<if test="relationalIdOut != null">
					relational_id_out = #{relationalIdOut,jdbcType=VARCHAR},
				</if>
				
				<if test="memberType != null">
					member_type = #{memberType,jdbcType=VARCHAR},
				</if>
				<if test="dob != null">
					dob = #{dob,jdbcType=DATE},
				</if>
				
				<if test="districtIdOut != null">
					district_id_out = #{districtIdOut,jdbcType=VARCHAR},
				</if>
				<if test="districtIdIn != null">
					district_id_in = #{districtIdIn,jdbcType=VARCHAR},
				</if>
				<if test="motherId != null">
					mother_id = #{motherId,jdbcType=VARCHAR},
				</if>
				<if test="divisionIdOut != null">
					division_id_out = #{divisionIdOut,jdbcType=VARCHAR},
				</if>
				<if test="divisionIdIn != null">
					division_id_in = #{divisionIdIn,jdbcType=VARCHAR},
				</if>
				<if test="timestamp != null">
					timestamp = #{timestamp,jdbcType=BIGINT},
				</if>
			</trim>
	      
	    </set>
	    <where>
		    	base_entity_id=#{baseEntityId,jdbcType=VARCHAR} and status='PENDING'
		</where>
	  </update>
	  
	  <update id="updateMigrationStatusByRelationalId">    
    	update core.migration
	    <set>      
	        status = #{status,jdbcType=VARCHAR}
	    </set>
	    <where>
	    	relational_id_in=#{relationalId,jdbcType=VARCHAR}
	    </where>
  	</update>
  	
  	<select id="selectLocationByTagId" resultMap="LocationMap">
		SELECT parent_location_id parent_id,l.id id, split_part(l.name, ':', 1) as name from core.location l
		         WHERE l.location_tag_id=#{tagId,jdbcType=BIGINT}
		 	
	</select>
	
	<select id="selectLocationByparentId" resultMap="LocationMap">
		SELECT parent_location_id parent_id,l.id id, split_part(l.name, ':', 1) as name from core.location l
		         WHERE l.parent_location_id=#{parentId,jdbcType=BIGINT}
		 	
	</select>
	
	<select id="selectSearchClient" resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select * from core.searched_client_list(#{vilageId},#{gender},#{startAge},#{endAge},#{type}); 
		 	
	</select>
	
	<select id="selectMigratedList" resultType="String">
		select base_entity_id from core.migration as m where sk_out =#{provider,jdbcType=VARCHAR}
			and member_type=#{type,jdbcType=VARCHAR} and status='ACCEPT' and timestamp > #{timestamp,jdbcType=BIGINT}
	</select>
	<select id="selectRejectedList" resultType="String">
		select base_entity_id from core.migration as m where sk_in =#{provider,jdbcType=VARCHAR}
			and member_type=#{type,jdbcType=VARCHAR} and status='REJECT' and timestamp > #{timestamp,jdbcType=BIGINT}
	</select>
	
</mapper>
