<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="org.opensrp.repository.postgres.mapper.custom.CustomClientMetadataMapper">
		
	<sql id="Base_Column_List">
		c.id, c.json
	</sql>
	
	<sql id="Base_Table_List">
		from core.client_metadata${table} cm
		join core.client${table} c on cm.client_id = c.id
	</sql>
	
	
	<resultMap id="webNotification" type="org.opensrp.domain.postgres.WebNotification">
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="notification_type" jdbcType="VARCHAR" property="notificationType"/>
		<result column="title" jdbcType="VARCHAR" property="title"/>
		<result column="notification" jdbcType="VARCHAR" property="details"/>
		<result column="send_date" jdbcType="VARCHAR" property="sendDate"/>		
		<result column="send_time_hour" jdbcType="BIGINT" property="hour"/>
		<result column="send_time_minute" jdbcType="BIGINT" property="minute"/>
		<result column="time_stamp" jdbcType="BIGINT" property="timestamp"/>
	</resultMap>
	<resultMap id="stockInfo" type="org.opensrp.domain.postgres.StockInfo">
		<id column="stock_id" jdbcType="BIGINT" property="stockId" />
		<result column="product_id" jdbcType="BIGINT" property="productId"/>
		<result column="expirey_date" jdbcType="VARCHAR" property="expireyDate"/>
		<result column="product_name" jdbcType="VARCHAR" property="productName"/>
		<result column="quantity" jdbcType="BIGINT" property="quantity"/>		
		<result column="receive_date" jdbcType="VARCHAR" property="receiveDate"/>		
		<result column="year_" jdbcType="BIGINT" property="year"/>		
		<result column="month_" jdbcType="BIGINT" property="month"/>
		<result column="time_stamp" jdbcType="BIGINT" property="timestamp"/>
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" prefixOverrides="and" suffix=")">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and cm.${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and cm.${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and cm.${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and cm.${criterion.condition}
									<foreach close=")" collection="criterion.value" item="listItem"
										open="(" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	
	
	<select id="selectMany"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<if test="example.distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="example.orderByClause != null">
			order by cm.${example.orderByClause}
		</if>
		LIMIT #{limit} OFFSET #{offset}
	</select>	
	
	<select id="selectByName"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		<bind name="name" value="'%' + name + '%'" />
		where ( cm.first_name ilike #{name} or cm.middle_name ilike #{name} or cm.last_name ilike #{name} )
		and cm.date_deleted is null
		LIMIT #{limit} OFFSET #{offset}
	</select>	
	
	<select id="selectOne"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		where cm.base_entity_id = #{baseEntityId,jdbcType=VARCHAR} and cm.date_deleted is null
	</select>
	
	<select id="selectByDocumentId"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		<include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		where cm.document_id = #{documentId,jdbcType=VARCHAR} and cm.date_deleted is null
	</select>
	
	
	<select id="selectBySearchBean"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select id,json from core.client${table} where core.client.id=any(
			select client_id from core.client_metadata${table} where server_version::BIGINT >= #{clientBean.serverVersion,jdbcType=BIGINT}
			
			<if test="addressBean.address2 != null">
					and address2 IN				
			    	<foreach close=")" collection="addressBean.address2" item="listItem" open="(" separator=",">
							#{listItem}
					</foreach>	
			</if>
			<if test="addressBean.address1 != null">
				and address1 IN
				<foreach close=")" collection="addressBean.address1" item="listItem" open="(" separator=",">
					#{listItem}
				</foreach>
			</if>
		) 
		order by id asc LIMIT #{limit}
		<!-- <include refid="Base_Column_List" />
		<include refid="Base_Table_List" />
		<if test="addressBean!=null and addressBean.hasFilter">
			join jsonb_array_elements(json->'addresses') as address on true	
		</if>
		<where>
			<trim prefixOverrides="and">
			 	cm.date_deleted is null
				<if test="clientBean.nameLike != null">
					<bind name="name" value="'%' + clientBean.nameLike + '%'" />
					and (	cm.first_name ilike #{name} or
							cm.middle_name ilike #{name} or
							cm.last_name ilike #{name} 
						)
				</if>
				<if test="clientBean.gender != null">
					and c.json->>'gender' = #{clientBean.gender,jdbcType=VARCHAR}
				</if>
				<if test="clientBean.birthdateFrom != null and clientBean.birthdateTo != null">
					and cm.birth_date  
					between #{clientBean.birthdateFrom,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler} 
					and	 	#{clientBean.birthdateTo,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler}
				</if>
				<if test="clientBean.deathdateFrom != null and clientBean.deathdateTo != null">
					and (json->>'deathdate')::date
					between #{clientBean.deathdateFrom,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler} 
					and	 	#{clientBean.deathdateTo,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler}
				</if>
				<if test="clientBean.attributeType != null and clientBean.attributeValue != null">
					and json -> 'attributes' ->> #{clientBean.attributeType,jdbcType=VARCHAR} = #{clientBean.attributeValue,jdbcType=VARCHAR}
				</if>
				<if test="clientBean.lastEditFrom != null and clientBean.lastEditTo != null">
					and (json->>'dateEdited')::timestamp
					between #{clientBean.lastEditFrom,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler} 
					and	 	#{clientBean.lastEditTo,typeHandler=org.opensrp.repository.postgres.handler.DateTimeTypeHandler}
				</if>
				<if test="clientBean.serverVersion != null">
					and (c.json->>'serverVersion')::BIGINT >= #{clientBean.serverVersion,jdbcType=BIGINT}
				</if> 
				<if test="addressBean.addressType != null">
					and address ->> 'addressType' = #{addressBean.addressType,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.country != null">
					and address ->'addressFields' ->> 'country' = #{addressBean.country,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.stateProvince != null">
					and address ->'addressFields' ->> 'stateProvince' = #{addressBean.stateProvince,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.cityVillage != null">
					and address ->'addressFields' ->> 'cityVillage' = #{addressBean.cityVillage,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.countyDistrict != null">
					and address ->'addressFields' ->> 'countyDistrict' = #{addressBean.countyDistrict,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.town != null">
					and address ->'addressFields' ->> 'town' = #{addressBean.town,jdbcType=VARCHAR}
				</if>
				<if test="addressBean.subTown != null">
					and address ->'addressFields' ->> 'subTown' = #{addressBean.subTown,jdbcType=VARCHAR}
				</if> 
				<if test="addressBean.address2 != null">
					and address ->'addressFields' ->> 'address2' IN(#{addressBean.address2,jdbcType=VARCHAR})
				</if> 
				<if test="addressBean.address3 != null">
					and address ->'addressFields' ->> 'address3' = #{addressBean.address3,jdbcType=VARCHAR}
				</if> 
				Params for SearchRepository
				<if test="clientBean.firstName != null">	
					<bind name="firstName" value="'%' + clientBean.firstName + '%'" />
					and c.json->>'firstName' ilike #{firstName}
				</if>
				<if test="clientBean.middleName != null">
					<bind name="middleName" value="'%' + clientBean.middleName + '%'" />
					and c.json->>'middleName' ilike #{middleName}
				</if>
				<if test="clientBean.lastName != null">
					<bind name="lastName" value="'%' + clientBean.lastName + '%'" />
					and c.json->>'lastName' ilike #{lastName}
				</if>
				<if test="addressBean.address2 != null">
					and cm.address2 IN				
			    	<foreach close=")" collection="addressBean.address2" item="listItem" open="(" separator=",">
							#{listItem}
					</foreach>	
				</if>
				<if test="addressBean.address3 != null">
					and address ->'addressFields' ->> 'address3' IN				
			    	<foreach close=")" collection="addressBean.address3" item="listItem" open="(" separator=",">
							#{listItem}
					</foreach>	
				</if>	    		
				
				<if test="clientBean.identifiers != null" >
					<trim prefix="and ("  suffix=")" >
					 <foreach collection="clientBean.identifiers" index="key" item="value" separator=" or " >
		        			json -> 'identifiers' ->> #{key,jdbcType=VARCHAR} = #{value,jdbcType=VARCHAR}
		    			</foreach>
		    			</trim>
				</if>
				<if test="clientBean.attributes != null" >
					<trim prefix="and (" suffix=")" >			 
					 <foreach collection="clientBean.attributes"  index="key" item="value" separator=" or " >
		        			json -> 'attributes' ->> #{key,jdbcType=VARCHAR} = #{value,jdbcType=VARCHAR}
		    			</foreach>
		    			</trim>
				</if>
			</trim>
		</where>
		order by cm.serverVersion asc LIMIT #{limit}  -->
	</select>	
	
	<select id="findClientIdByBaseEntityId"
		resultType="Integer">
		select client_id
		from core.client_metadata${table} cm
		where cm.base_entity_id = #{baseEntityId,jdbcType=VARCHAR} and cm.date_deleted is null limit 1
	</select>
	
	<select id="findClientByClientId"
		resultMap="org.opensrp.repository.postgres.mapper.ClientMapper.BaseResultMap">
		select
		c.id, c.json
		from core.client${table} c
		where c.id = #{clientId} limit 1
	</select>
	
	<select id="selectIsResync" parameterType="java.lang.String"
		resultType="String">
		select u.is_resync from core.users as u where u.username =#{username,jdbcType=VARCHAR}  limit 1
	</select>
	
	<select id="selectWebNotifications"
		resultMap="webNotification">
		select * from core.get_web_notification_for_mobile(#{username,jdbcType=VARCHAR},#{timestamp,jdbcType=BIGINT})
	</select>
	
	<select id="selectStockInfos"
		resultMap="stockInfo">
		select * from core.get_stok_for_mobile(#{username,jdbcType=VARCHAR},#{timestamp,jdbcType=BIGINT})
	</select>
</mapper>